---
// src/layouts/BaseLayout.astro
export interface Props {
  // Core SEO
  title: string;
  description: string;
  keywords?: string;
  author?: string;
  
  // URLs and Canonicals
  canonical?: string;
  alternateLanguages?: { lang: string; url: string }[];
  
  // Open Graph & Social
  ogTitle?: string;
  ogDescription?: string;
  ogImage?: string;
  ogType?: 'website' | 'article' | 'product' | 'profile';
  
  // Twitter Cards
  twitterCard?: 'summary' | 'summary_large_image' | 'app' | 'player';
  twitterImage?: string;
  
  // Article specific (for blog posts)
  articlePublishedTime?: string;
  articleModifiedTime?: string;
  articleAuthor?: string;
  articleSection?: string;
  articleTags?: string[];
  
  // Technical
  robots?: string;
  viewport?: string;
  themeColor?: string;
  lang?: string;
  dir?: 'ltr' | 'rtl';
  
  // Performance
  preconnectUrls?: string[];
  preloadFonts?: { href: string; type?: string; crossorigin?: boolean }[];
  preloadImages?: string[];
  
  // Favicons
  favicon?: string;
  appleTouchIcon?: string;
  manifestPath?: string;
  
  // Schema.org structured data
  schemaData?: object;
  
  // Additional meta tags
  additionalMetaTags?: { name: string; content: string }[];
  additionalLinkTags?: { rel: string; href: string; [key: string]: string }[];
  
  // CSS and Scripts
  inlineCSS?: string;
  criticalCSS?: string;
  bodyClass?: string;
}

// Import site configuration
import siteConfig from '../config/site.js';

// Destructure props with Geohabari-specific defaults
const {
  title,
  description,
  keywords = "African tech, geospatial, GIS, earth observation, tech careers, study abroad, podcasts, technology Africa",
  author = siteConfig.author,
  
  canonical,
  alternateLanguages = [],
  
  ogTitle,
  ogDescription,
  ogImage,
  ogType = "website",
  
  twitterCard = "summary_large_image",
  twitterImage,
  
  articlePublishedTime,
  articleModifiedTime,
  articleAuthor,
  articleSection,
  articleTags = [],
  
  robots = "index, follow",
  viewport = "width=device-width, initial-scale=1.0",
  themeColor = "#1a1a1a", // Dark theme for tech brand
  lang = "en",
  dir = "ltr",
  
  preconnectUrls = [
    "https://fonts.googleapis.com",
    "https://fonts.gstatic.com",
    "https://www.google-analytics.com"
  ],
  preloadFonts = [
    { href: "/fonts/inter-var.woff2", type: "font/woff2", crossorigin: true }
  ],
  preloadImages = [],
  
  favicon = "/favicon.ico",
  appleTouchIcon = "/apple-touch-icon.png",
  manifestPath = "/manifest.json",
  
  schemaData,
  
  additionalMetaTags = [],
  additionalLinkTags = [],
  
  inlineCSS,
  criticalCSS,
  bodyClass = ""
} = Astro.props;

// Generate canonical URL
const canonicalURL = canonical || new URL(Astro.url.pathname, Astro.site).href;

// Fallback values for social media
const socialTitle = ogTitle || title;
const socialDescription = ogDescription || description;
const socialImage = ogImage || twitterImage || `${Astro.site}images/geohabari-og.jpg`;

// Current date for lastmod
const currentDate = new Date().toISOString();

// Generate Geohabari-specific structured data
const geohabariSchema = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "name": siteConfig.name,
  "alternateName": "Geohabari Podcast",
  "description": siteConfig.description,
  "url": siteConfig.url,
  "dateModified": currentDate,
  "author": {
    "@type": "Organization",
    "name": siteConfig.name,
    "url": siteConfig.url,
    "logo": `${siteConfig.url}images/geohabari-logo.png`,
    "sameAs": siteConfig.social.map(social => social.url)
  },
  "publisher": {
    "@type": "Organization", 
    "name": siteConfig.name,
    "url": siteConfig.url,
    "logo": {
      "@type": "ImageObject",
      "url": `${siteConfig.url}images/geohabari-logo.png`
    }
  },
  "potentialAction": {
    "@type": "SearchAction",
    "target": `${siteConfig.url}search?q={search_term_string}`,
    "query-input": "required name=search_term_string"
  },
  "about": [
    {
      "@type": "Thing",
      "name": "African Technology"
    },
    {
      "@type": "Thing", 
      "name": "Geospatial Technology"
    },
    {
      "@type": "Thing",
      "name": "Earth Observation"
    },
    {
      "@type": "Thing",
      "name": "Tech Careers"
    },
    {
      "@type": "Thing",
      "name": "Study Abroad"
    }
  ]
};

// Use custom schema if provided, otherwise use Geohabari default
const finalSchemaData = schemaData || geohabariSchema;
---

<!DOCTYPE html>
<html lang={lang} dir={dir}>
<head>
  <!-- Basic Meta Tags -->
  <meta charset="UTF-8">
  <meta name="viewport" content={viewport}>
  <meta name="generator" content={Astro.generator}>
  
  <!-- Core SEO -->
  <title>{title}</title>
  <meta name="description" content={description}>
  <meta name="keywords" content={keywords}>
  <meta name="author" content={author}>
  <meta name="robots" content={robots}>
  
  <!-- Geohabari Branding -->
  <meta name="application-name" content="Geohabari">
  <meta name="msapplication-TileColor" content={themeColor}>
  <meta name="msapplication-tooltip" content="Amplifying African tech stories & building tech brilliance">
  
  <!-- Canonical and Alternate Languages -->
  <link rel="canonical" href={canonicalURL}>
  {alternateLanguages.map(({ lang, url }) => (
    <link rel="alternate" hreflang={lang} href={url}>
  ))}
  
  <!-- Favicons and App Icons -->
  <link rel="icon" href={favicon} sizes="any">
  <link rel="icon" href="/favicon.svg" type="image/svg+xml">
  <link rel="apple-touch-icon" href={appleTouchIcon}>
  {manifestPath && <link rel="manifest" href={manifestPath}>}
  
  <!-- Theme and App Appearance -->
  <meta name="theme-color" content={themeColor}>
  <meta name="color-scheme" content="dark light">
  <meta name="msapplication-TileColor" content={themeColor}>
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="apple-mobile-web-app-title" content="Geohabari">
  
  <!-- Open Graph / Facebook -->
  <meta property="og:type" content={ogType}>
  <meta property="og:site_name" content="Geohabari">
  <meta property="og:title" content={socialTitle}>
  <meta property="og:description" content={socialDescription}>
  <meta property="og:image" content={socialImage}>
  <meta property="og:url" content={canonicalURL}>
  <meta property="og:locale" content={lang}>
  <meta property="og:image:width" content="1200">
  <meta property="og:image:height" content="630">
  <meta property="og:image:alt" content="Geohabari - Amplifying African tech stories">
  
  <!-- Article specific Open Graph -->
  {ogType === 'article' && articlePublishedTime && (
    <meta property="article:published_time" content={articlePublishedTime}>
  )}
  {ogType === 'article' && articleModifiedTime && (
    <meta property="article:modified_time" content={articleModifiedTime}>
  )}
  {ogType === 'article' && articleAuthor && (
    <meta property="article:author" content={articleAuthor}>
  )}
  {ogType === 'article' && articleSection && (
    <meta property="article:section" content={articleSection}>
  )}
  {ogType === 'article' && articleTags.map(tag => (
    <meta property="article:tag" content={tag}>
  ))}
  
  <!-- Twitter Cards -->
  <meta name="twitter:card" content={twitterCard}>
  <meta name="twitter:site" content="@geohabari">
  <meta name="twitter:creator" content="@geohabari">
  <meta name="twitter:title" content={socialTitle}>
  <meta name="twitter:description" content={socialDescription}>
  <meta name="twitter:image" content={socialImage}>
  <meta name="twitter:image:alt" content="Geohabari - Amplifying African tech stories">
  
  <!-- Performance: Preconnect to external domains -->
  {preconnectUrls.map(url => (
    <link rel="preconnect" href={url} crossorigin>
  ))}
  
  <!-- Performance: Preload critical fonts -->
  {preloadFonts.map(font => (
    <link 
      rel="preload" 
      href={font.href} 
      as="font" 
      type={font.type || "font/woff2"} 
      {...(font.crossorigin && { crossorigin: true })}
    >
  ))}
  
  <!-- Performance: Preload critical images -->
  {preloadImages.map(image => (
    <link rel="preload" href={image} as="image">
  ))}
  
  <!-- DNS Prefetch for common domains -->
  <link rel="dns-prefetch" href="//fonts.googleapis.com">
  <link rel="dns-prefetch" href="//www.google-analytics.com">
  <link rel="dns-prefetch" href="//www.googletagmanager.com">
  <link rel="dns-prefetch" href="//open.spotify.com">
  <link rel="dns-prefetch" href="//anchor.fm">
  
  <!-- Additional Meta Tags -->
  {additionalMetaTags.map(({ name, content }) => (
    <meta name={name} content={content}>
  ))}
  
  <!-- Additional Link Tags -->
  {additionalLinkTags.map(({ rel, href, ...attrs }) => (
    <link rel={rel} href={href} {...attrs}>
  ))}
  
  <!-- Critical CSS - Above the fold styles -->
  {criticalCSS && (
    <style is:inline>
      {criticalCSS}
    </style>
  )}
  
  <!-- Additional Inline CSS -->
  {inlineCSS && (
    <style is:inline>
      {inlineCSS}
    </style>
  )}
  
  <!-- Geohabari Brand CSS Reset and Critical Styles -->
  <style is:inline>
    /* Critical CSS Reset */
    *, *::before, *::after {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    html {
      font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      line-height: 1.6;
      -webkit-text-size-adjust: 100%;
      scroll-behavior: smooth;
    }
    
    body {
      min-height: 100vh;
      text-rendering: optimizeSpeed;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      background-color: #0a0a0a;
      color: #ffffff;
    }
    
    img, picture, video, canvas, svg {
      display: block;
      max-width: 100%;
      height: auto;
    }
    
    input, button, textarea, select {
      font: inherit;
    }
    
    /* Focus styles for accessibility */
    :focus-visible {
      outline: 2px solid #00d4aa;
      outline-offset: 2px;
    }
    
    /* Geohabari brand colors */
    :root {
      --primary: #00d4aa;
      --secondary: #1a1a1a;
      --text: #ffffff;
      --text-muted: #a0a0a0;
      --background: #0a0a0a;
      --surface: #1a1a1a;
    }
    
    /* Reduce motion for users who prefer it */
    @media (prefers-reduced-motion: reduce) {
      html {
        scroll-behavior: auto;
      }
      
      *, *::before, *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
        scroll-behavior: auto !important;
      }
    }
    
    /* Loading state */
    .loading {
      opacity: 0.6;
      pointer-events: none;
    }
  </style>
  
  <!-- Structured Data (JSON-LD) -->
  <script type="application/ld+json" set:html={JSON.stringify(finalSchemaData)}></script>
  
  <!-- Google Analytics -->
  <!-- Replace GA_TRACKING_ID with your actual Google Analytics ID -->
  <!--
  <script async src="https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID"></script>
  <script is:inline>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'GA_TRACKING_ID', {
      page_title: document.title,
      page_location: window.location.href
    });
  </script>
  -->
</head>

<body class={bodyClass}>
  <!-- Skip to main content for accessibility -->
  <a href="#main-content" class="skip-link">Skip to main content</a>
  
  <!-- Main content slot -->
  <slot />
  
  <!-- Non-critical CSS can be loaded here -->
  <link rel="stylesheet" href="/styles/main.css" media="print" onload="this.media='all'; this.onload=null;">
  
  <!-- Service Worker Registration -->
  <script is:inline>
    if ('serviceWorker' in navigator && 'PushManager' in window) {
      navigator.serviceWorker.register('/sw.js')
        .then(registration => console.log('SW registered'))
        .catch(error => console.log('SW registration failed'));
    }
  </script>
</body>

<style lang="scss">
 @use '../styles/partials/combined.scss' as *;

  .skip-link {
    position: absolute;
    top: -40px;
    left: 6px;
    background: $purple;
    color: $white;
    padding: 8px 16px;
    text-decoration: none;
    border-radius: 4px;
    z-index: 1000;
    transition: top 0.3s;
    font-weight: 600;
  }
  
  .skip-link:focus {
    top: 6px;
  }
</style>
</html>