---
/**
 * AudioPlayer.astro
 * * A reusable audio player component that accepts episode data as props.
 * This component handles all audio playback functionality including:
 * - Play/pause controls
 * - Skip forward/backward (15 seconds)
 * - Progress bar with scrubbing
 * - Volume control with mute
 * - Playback speed adjustment
 * - Responsive design
 */

export interface Props {
  audioUrl?: string;
  title?: string;
  episodeNumber?: string;
  coverImageUrl?: string;
  duration?: number;
  autoLoad?: boolean;
}

const {
  audioUrl,
  title = "Choose an episode from the list to start listening",
  episodeNumber = "Select an episode",
  coverImageUrl = "https://placehold.co/400x400",
  duration,
  autoLoad = false
} = Astro.props;

// Import Image component for optimized images
import Image from "astro/components/Image.astro";
---

<!-- Episode Cover and Details -->
<div class="ep-player">
  <Image
    src={coverImageUrl}
    alt="Episode Cover"
    width={400}
    height={400}
    class="ep-cover"
  />
  <div class="ep-details">
    <h5 id="current-episode-number">{episodeNumber}</h5>
    <h4 id="current-episode-title">{title}</h4>
    
    <!-- Custom Audio Player Controls -->
    <div class="player-controls">
      <!-- Hidden native audio element -->
      <audio 
        id="main-audio-player" 
        preload={audioUrl ? "metadata" : "none"}
        style="display: none;"
        src={autoLoad && audioUrl ? audioUrl : undefined}
      >
        Your browser does not support the audio element.
      </audio>
      
      <!-- Custom audio player controls -->
      <div class="custom-audio-player">
        <div class="player-main-controls">
          <!-- Play/Pause Button -->
          <button id="play-pause-btn" class="play-btn" disabled={!audioUrl}>
            <svg class="play-icon" viewBox="0 0 24 24" width="24" height="24">
              <path fill="currentColor" d="M8 5v14l11-7z"/>
            </svg>
            <svg class="pause-icon" viewBox="0 0 24 24" width="24" height="24" style="display: none;">
              <path fill="currentColor" d="M6 4h4v16H6V4zm8 0h4v16h-4V4z"/>
            </svg>
          </button>
          <!-- Skip Back Button -->
          <button id="skip-back-btn" class="control-btn">
            <svg viewBox="0 0 24 24" width="20" height="20">
              <path fill="currentColor" d="M11 18V6l-8.5 6 8.5 6zm.5-6l8.5 6V6l-8.5 6z"/>
            </svg>
          </button>
          <!-- Skip Forward Button -->
          <button id="skip-forward-btn" class="control-btn">
            <svg viewBox="0 0 24 24" width="20" height="20">
              <path fill="currentColor" d="M4 18l8.5-6L4 6v12zm9-12v12l8.5-6L13 6z"/>
            </svg>
          </button>
        </div>
        
        <div class="player-progress">
          <div class="time-info">
            <span id="current-time">0:00</span>
            <div class="progress-container">
              <div class="progress-bar">
                <div id="progress-fill" class="progress-fill"></div>
                <input type="range" id="progress-slider" class="progress-slider" min="0" max="100" value="0">
              </div>
            </div>
            <span id="duration-time">0:00</span>
          </div>
        </div>

        <div class="player-volume">
          <!-- Mute Button -->
          <button id="mute-btn" class="control-btn">
            <svg class="volume-on" viewBox="0 0 24 24" width="18" height="18">
              <path fill="currentColor" d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>
            </svg>
            <svg class="volume-off" viewBox="0 0 24 24" width="18" height="18" style="display: none;">
              <path fill="currentColor" d="M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z"/>
            </svg>
          </button>
          <!-- Volume Slider -->
          <input type="range" id="volume-slider" class="volume-slider" min="0" max="100" value="70">
        </div>

        <!-- Playback Speed Button -->
        <div class="playback-speed">
          <button id="speed-btn" class="control-btn">1x</button>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ audioUrl, duration, autoLoad }}>
  class AudioPlayerController {
    constructor() {
      this.audioPlayer = document.getElementById('main-audio-player');
      this.playPauseBtn = document.getElementById('play-pause-btn');
      this.skipBackBtn = document.getElementById('skip-back-btn');
      this.skipForwardBtn = document.getElementById('skip-forward-btn');
      this.progressSlider = document.getElementById('progress-slider');
      this.progressFill = document.getElementById('progress-fill');
      this.currentTimeDisplay = document.getElementById('current-time');
      this.durationTimeDisplay = document.getElementById('duration-time');
      this.muteBtn = document.getElementById('mute-btn');
      this.volumeSlider = document.getElementById('volume-slider');
      this.speedBtn = document.getElementById('speed-btn');
      
      this.isDragging = false;
      this.playbackSpeeds = [0.5, 0.75, 1, 1.25, 1.5, 2];
      this.currentSpeedIndex = 2; // Default to 1x

      this.initialize();
    }

    formatTime(seconds) {
      if (isNaN(seconds)) return '0:00';
      const mins = Math.floor(seconds / 60);
      const secs = Math.floor(seconds % 60);
      return `${mins}:${secs.toString().padStart(2, '0')}`;
    }

    updateDurationDisplay(duration) {
      if (this.durationTimeDisplay) {
        this.durationTimeDisplay.textContent = this.formatTime(duration);
      }
    }

    updatePlayPauseButton(isPlaying) {
      const playIcon = document.querySelector('.play-icon');
      const pauseIcon = document.querySelector('.pause-icon');
      if (isPlaying) {
        playIcon.style.display = 'none';
        pauseIcon.style.display = 'block';
      } else {
        playIcon.style.display = 'block';
        pauseIcon.style.display = 'none';
      }
    }

    updateMuteButton(hasVolume) {
      const volumeOn = document.querySelector('.volume-on');
      const volumeOff = document.querySelector('.volume-off');
      if (hasVolume) {
        volumeOn.style.display = 'block';
        volumeOff.style.display = 'none';
      } else {
        volumeOn.style.display = 'none';
        volumeOff.style.display = 'block';
      }
    }

    // Public method to load new episode data
    loadEpisode(episodeData) {
      const {
        audioUrl: newAudioUrl,
        title,
        episodeNumber,
        coverImageUrl,
        duration: newDuration
      } = episodeData;

      // Update UI elements
      if (title) {
        const titleElement = document.getElementById('current-episode-title');
        if (titleElement) titleElement.textContent = title;
      }

      if (episodeNumber) {
        const episodeElement = document.getElementById('current-episode-number');
        if (episodeElement) episodeElement.textContent = episodeNumber;
      }



      if (coverImageUrl) {
        const coverElement = document.querySelector('.ep-cover');
        if (coverElement) {
          coverElement.src = coverImageUrl;
          coverElement.alt = `${title} Cover`;
        }
      }

      // Load new audio
      if (newAudioUrl && this.audioPlayer) {
        this.loadAudioSource(newAudioUrl, newDuration);
      }
    }

    loadAudioSource(audioUrl, duration) {
      if (!this.audioPlayer || !audioUrl) return;

      // Reset player state before loading new audio
      this.audioPlayer.pause();
      this.audioPlayer.currentTime = 0;
      this.updatePlayPauseButton(false);
      
      // Set the new audio source and enable the play button
      this.audioPlayer.src = audioUrl;
      this.playPauseBtn.disabled = false;
      
      // Update duration if provided, otherwise wait for metadata
      if (duration) {
        this.updateDurationDisplay(duration);
      }

      console.log(`Loaded audio: ${audioUrl}`);
    }

    initialize() {
      if (!this.audioPlayer) return;

      // Initialize with provided audio URL if autoLoad is true
      if (autoLoad && audioUrl) {
        this.loadAudioSource(audioUrl, duration);
      }

      // Set up event listeners
      this.setupEventListeners();
      
      // Set initial volume
      this.audioPlayer.volume = 0.7;
    }

    setupEventListeners() {
      // Play/Pause button
      this.playPauseBtn?.addEventListener('click', () => {
        if (this.audioPlayer.paused) {
          this.audioPlayer.play();
        } else {
          this.audioPlayer.pause();
        }
      });

      // Skip buttons
      this.skipBackBtn?.addEventListener('click', () => {
        this.audioPlayer.currentTime = Math.max(0, this.audioPlayer.currentTime - 15);
      });

      this.skipForwardBtn?.addEventListener('click', () => {
        this.audioPlayer.currentTime = Math.min(this.audioPlayer.duration, this.audioPlayer.currentTime + 15);
      });

      // Progress slider
      this.progressSlider?.addEventListener('mousedown', () => { this.isDragging = true; });
      this.progressSlider?.addEventListener('mouseup', () => { this.isDragging = false; });
      this.progressSlider?.addEventListener('input', (e) => {
        if (this.audioPlayer.duration) {
          const time = (e.target.value / 100) * this.audioPlayer.duration;
          this.audioPlayer.currentTime = time;
        }
      });

      // Volume controls
      this.volumeSlider?.addEventListener('input', (e) => {
        const volume = e.target.value / 100;
        this.audioPlayer.volume = volume;
        this.updateMuteButton(volume > 0);
      });

      this.muteBtn?.addEventListener('click', () => {
        if (this.audioPlayer.volume > 0) {
          this.audioPlayer.dataset.lastVolume = this.audioPlayer.volume;
          this.audioPlayer.volume = 0;
          this.volumeSlider.value = 0;
          this.updateMuteButton(false);
        } else {
          const lastVolume = this.audioPlayer.dataset.lastVolume || 0.7;
          this.audioPlayer.volume = lastVolume;
          this.volumeSlider.value = lastVolume * 100;
          this.updateMuteButton(true);
        }
      });

      // Playback speed
      this.speedBtn?.addEventListener('click', () => {
        this.currentSpeedIndex = (this.currentSpeedIndex + 1) % this.playbackSpeeds.length;
        const newSpeed = this.playbackSpeeds[this.currentSpeedIndex];
        this.audioPlayer.playbackRate = newSpeed;
        this.speedBtn.textContent = `${newSpeed}x`;
      });

      // Audio element events
      this.audioPlayer.addEventListener('play', () => this.updatePlayPauseButton(true));
      this.audioPlayer.addEventListener('pause', () => this.updatePlayPauseButton(false));
      
      this.audioPlayer.addEventListener('timeupdate', () => {
        if (!this.isDragging && this.audioPlayer.duration) {
          const progress = (this.audioPlayer.currentTime / this.audioPlayer.duration) * 100;
          this.progressSlider.value = progress;
          this.progressFill.style.width = `${progress}%`;
          this.currentTimeDisplay.textContent = this.formatTime(this.audioPlayer.currentTime);
        }
      });

      this.audioPlayer.addEventListener('loadedmetadata', () => {
        this.updateDurationDisplay(this.audioPlayer.duration);
      });

      this.audioPlayer.addEventListener('error', (e) => {
        console.error('Audio player error:', e);
        this.playPauseBtn.disabled = true;
      });
    }
  }

  // Initialize the audio player when the component loads
  document.addEventListener('DOMContentLoaded', () => {
    const audioPlayerController = new AudioPlayerController();
    
    // Make the controller globally accessible for external control
    window.audioPlayerController = audioPlayerController;
  });
</script>

<style>
  /* Import your existing audio player styles here */
  /* You can either include the styles inline or import from your SCSS file */
  .audio-player-component {
    width: 100%;
  }

  /* Add any component-specific styles here */
  .ep-player {
    display: flex;
    gap: 1.5rem;
    align-items: flex-start;
  }

  .ep-details {
    flex: 1;
    min-width: 0; /* Prevents flex item from overflowing */
  }

  .ep-cover {
    flex-shrink: 0;
  }

  @media (max-width: 768px) {
    .ep-player {
      flex-direction: column;
      align-items: center;
      text-align: center;
    }
  }
</style>